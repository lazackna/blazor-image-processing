@page "/Image"
@using System.Net
@using System.Net.Http.Headers
@using System.Reflection
@using System.Text
@using System.Text.Json.Serialization
@using BlazorApp.Shared
@using BlazorApp.Shared.Processing
@using Newtonsoft.Json
@inject HttpClient Http

<h3>Image</h3>
@* <button @onclick="FetchImage">Fetch Image</button> *@
<InputFile OnChange="HandleFileInput"/>
<button @onclick="ProcessImage"></button>
<img src="@imageData" alt="test"/>

<ul>

    @foreach (var item in testList)
    {
        <li>@item</li>
    }
    
</ul>

@code {

    List<string> testList = new List<string>();
    
    private string imageData;
    private IBrowserFile selectedFile;

    private async Task<Type> getTypeByName(string typeName)
    {
        Assembly assembly = Assembly.Load("Shared");
        return assembly.GetType(typeName);
    }

    protected override async Task OnInitializedAsync()
    {
        var response = await Http.GetFromJsonAsync<List<string>>("/api/ImageInfo");

        foreach (var typeString in response)
        {
            Type type = await getTypeByName(typeString);
            Type t = typeof(ResizeProcess);

            Console.WriteLine(type.Name);
            foreach (var fieldInfo in type.GetProperties(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic))
            {
                Console.WriteLine(fieldInfo.PropertyType + " " + fieldInfo.Name);
            }
            
            testList.Add(typeString);
            
            Console.WriteLine();
        }
    }


    private async void CreateOptions()
    {
        var response = await Http.GetFromJsonAsync<List<string>>("/api/ImageInfo");

        foreach (var typeString in response)
        {
            Type type = await getTypeByName(typeString);
            Type t = typeof(ResizeProcess);

            Console.WriteLine(type.Name);
            foreach (var fieldInfo in type.GetProperties(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic))
            {
                Console.WriteLine(fieldInfo.PropertyType + " " + fieldInfo.Name);
            }

            Console.WriteLine();
        }
    }
    
    private async Task ProcessImage()
    {
        CreateOptions();
        var formData = new MultipartFormDataContent();

        var stream = selectedFile.OpenReadStream(selectedFile.Size);
        formData.Add(new StreamContent(stream), "file", selectedFile.Name);

        HttpResponseMessage response = null;
        using (var memoryStream = new MemoryStream())
        {
            await selectedFile.OpenReadStream().CopyToAsync(memoryStream);

            var processRequest = new ImageProcessingRequest();
            processRequest.base64ImageData = Convert.ToBase64String(memoryStream.ToArray());
            
            processRequest.Processes.Add(new ResizeProcess(100,100));
            
            string json = JsonConvert.SerializeObject(processRequest, Formatting.Indented, new JsonSerializerSettings 
            { 
                TypeNameHandling = TypeNameHandling.All 
            });
            response = await Http.PostAsync("/api/Image", new StringContent(json, Encoding.UTF8, "application/json"));
        }
        //post the image

        if (response.IsSuccessStatusCode)
        {
            var responseData = await response.Content.ReadAsByteArrayAsync();
            //Console.WriteLine(Convert.ToBase64String(responseData));
            imageData = $"data:Image/png;base64,{Convert.ToBase64String(responseData)}";
        }
        
        try
        {
           // var dataBytes = await Http.GetFromJsonAsync<byte[]>("/api/Image");
            //imageData = $"data:Image/png;base64,{Convert.ToBase64String(dataBytes)}";
     
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
    }

    private async Task HandleFileInput(InputFileChangeEventArgs e)
    {
        var file = e.GetMultipleFiles().FirstOrDefault();
        if (file != null)
        {
            selectedFile = file;
        }
    }
}